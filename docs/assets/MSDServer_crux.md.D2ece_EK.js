import{_ as r,c as o,o as a,aj as n}from"./chunks/framework.Dq3QIEZg.js";const s="/images/CRUX%EB%A0%88%EC%9D%B4%EC%96%B4%EB%93%9C.png",e="/images/CRUX%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4.png",_=JSON.parse('{"title":"CRUX 서버 아키텍처","description":"","frontmatter":{},"headers":[],"relativePath":"MSDServer/crux.md","filePath":"MSDServer/crux.md","lastUpdated":1739188907000}'),d={name:"MSDServer/crux.md"};function g(l,t,i,h,c,u){return a(),o("div",null,t[0]||(t[0]=[n('<h1 id="crux-서버-아키텍처" tabindex="-1">CRUX 서버 아키텍처 <a class="header-anchor" href="#crux-서버-아키텍처" aria-label="Permalink to &quot;CRUX 서버 아키텍처&quot;">​</a></h1><h2 id="_1-crux-서버-개요" tabindex="-1">1. CRUX 서버 개요 <a class="header-anchor" href="#_1-crux-서버-개요" aria-label="Permalink to &quot;1. CRUX 서버 개요&quot;">​</a></h2><p>CRUX 서버는 <strong>.NET Core 기반의 크로스플랫폼 애플리케이션</strong>으로 개발되었습니다.<br> 이를 통해 <strong>윈도우 서버뿐만 아니라 리눅스 서버에도 배포가 가능</strong>하여<br><strong>운영체제 라이선스 비용을 줄이고, 높은 확장성을 갖춘 서버</strong>로 설계되었습니다.</p><h2 id="_2-crux-서버의-주요-기능" tabindex="-1">2. CRUX 서버의 주요 기능 <a class="header-anchor" href="#_2-crux-서버의-주요-기능" aria-label="Permalink to &quot;2. CRUX 서버의 주요 기능&quot;">​</a></h2><p>✅ <strong>백엔드 웹 API (RESTful API) 제공</strong><br> ✅ <strong>실시간 데이터 처리를 위한 TCP 소켓 통신 기능</strong><br> ✅ <strong>보안 강화를 위한 로그인 비밀번호 보호 및 JWT(Json Web Token) 인증 적용</strong><br> ✅ <strong>테스트 클라이언트 없이도 서버 기능을 독립적으로 테스트할 수 있도록 설계</strong></p><h2 id="_3-레이어드-아키텍처" tabindex="-1">3. 레이어드 아키텍처 <a class="header-anchor" href="#_3-레이어드-아키텍처" aria-label="Permalink to &quot;3. 레이어드 아키텍처&quot;">​</a></h2><p>CRUX 서버의 코드는 <strong>계층형(Layered) 아키텍처</strong>를 적용하여 모듈화되었습니다.<br> 이를 통해 <strong>각 계층을 독립적으로 유지할 수 있어 코드의 유지보수와 확장성이 뛰어납니다.</strong></p><p><img src="'+s+'" alt="CRUX 레이어드 아키텍처"></p><h3 id="🔹-계층별-역할" tabindex="-1">🔹 <strong>계층별 역할</strong> <a class="header-anchor" href="#🔹-계층별-역할" aria-label="Permalink to &quot;🔹 **계층별 역할**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>계층</th><th>역할</th></tr></thead><tbody><tr><td><strong>HOST</strong></td><td>애플리케이션 실행 환경</td></tr><tr><td><strong>PRESENTATION</strong></td><td>RESTful API, TCP 소켓, Background 서비스</td></tr><tr><td><strong>INFRA</strong></td><td>PostgreSQL, Dapper, Cache와 같은 데이터 레이어</td></tr><tr><td><strong>DI</strong></td><td>의존성 주입(Dependency Injection)</td></tr><tr><td><strong>CORE</strong></td><td>핵심 비즈니스 로직</td></tr></tbody></table><h3 id="🔹-계층적-모듈화의-장점" tabindex="-1">🔹 <strong>계층적 모듈화의 장점</strong> <a class="header-anchor" href="#🔹-계층적-모듈화의-장점" aria-label="Permalink to &quot;🔹 **계층적 모듈화의 장점**&quot;">​</a></h3><ul><li>기능 추가 시 <strong>다른 계층을 변경하지 않고 독립적으로 개발 가능</strong></li><li><strong>데이터베이스 변경이 필요할 경우, 인프라 계층만 수정하면 적용 가능</strong></li><li>API 및 소켓 통신을 <strong>마이크로서비스로 독립적으로 확장 가능</strong></li><li><strong>파일 임포팅을 통해 새로운 기능을 추가 개발 가능</strong> (코드 복사 불필요)</li></ul><h2 id="_4-헤드리스-아키텍처" tabindex="-1">4. 헤드리스 아키텍처 <a class="header-anchor" href="#_4-헤드리스-아키텍처" aria-label="Permalink to &quot;4. 헤드리스 아키텍처&quot;">​</a></h2><p>CRUX 서버는 <strong>클라이언트와 데이터베이스(DB)와 완전히 분리된 헤드리스(Headless) 아키텍처</strong>로 구성되었습니다.<br> 이를 통해 <strong>서버는 독립적으로 동작하며 다양한 클라이언트 환경을 지원할 수 있습니다.</strong></p><p><img src="'+e+'" alt="CRUX 헤드리스 아키텍처"></p><h3 id="🔹-헤드리스-아키텍처의-구성-요소" tabindex="-1">🔹 <strong>헤드리스 아키텍처의 구성 요소</strong> <a class="header-anchor" href="#🔹-헤드리스-아키텍처의-구성-요소" aria-label="Permalink to &quot;🔹 **헤드리스 아키텍처의 구성 요소**&quot;">​</a></h3><ul><li><strong>데이터베이스(DB) 클러스터링 적용</strong> → <strong>고가용성(High Availability) 유지</strong></li><li><strong>클라우드 환경에서 수평 스케일링(Scaling) 가능</strong> → <strong>부하 분산 및 성능 최적화</strong></li><li><strong>표준화된 API 및 프로토콜 설계</strong> → <strong>다양한 클라이언트 지원 가능</strong><ul><li>PC, Mac, Web, Mobile, IoT 등 클라이언트 변경 없이 대응 가능</li></ul></li></ul><h2 id="_5-crux-서버-아키텍처의-기대-효과" tabindex="-1">5. CRUX 서버 아키텍처의 기대 효과 <a class="header-anchor" href="#_5-crux-서버-아키텍처의-기대-효과" aria-label="Permalink to &quot;5. CRUX 서버 아키텍처의 기대 효과&quot;">​</a></h2><table tabindex="0"><thead><tr><th>기존 서버 방식의 문제점</th><th>CRUX 서버의 개선점</th></tr></thead><tbody><tr><td>서버 아키텍처 변경 시 코드 재작성 필요</td><td><strong>계층 분리 설계를 통해 특정 계층만 수정 가능</strong></td></tr><tr><td>단일 서버 구성으로 확장 어려움</td><td><strong>클라우드 기반 수평 스케일링 지원</strong></td></tr><tr><td>클라이언트 유형 변경 시 서버 수정 필요</td><td><strong>헤드리스 아키텍처로 다양한 클라이언트 지원 가능</strong></td></tr></tbody></table><h2 id="_6-결론" tabindex="-1">6. 결론 <a class="header-anchor" href="#_6-결론" aria-label="Permalink to &quot;6. 결론&quot;">​</a></h2><p>✅ <strong>운영체제에 종속되지 않는 크로스플랫폼 서버</strong><br> ✅ <strong>확장성과 유지보수성이 뛰어난 계층형 아키텍처 적용</strong><br> ✅ <strong>마이크로서비스 확장을 고려한 설계로 유연한 구조</strong><br> ✅ <strong>클라우드 친화적인 헤드리스 아키텍처로 다양한 클라이언트 대응 가능</strong></p><p>CRUX 서버는 <strong>고성능, 고가용성, 확장성을 갖춘 백엔드 시스템</strong>으로<br> 스마트 팩토리 및 다양한 산업 환경에서 효율적으로 운영될 수 있도록 설계되었습니다. 🚀</p>',22)]))}const p=r(d,[["render",g]]);export{_ as __pageData,p as default};
