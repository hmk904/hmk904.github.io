import{_ as a,c as r,o as e,aj as o}from"./chunks/framework.Dq3QIEZg.js";const s="/images/MSD_ERD.png",m=JSON.parse('{"title":"MeScaDas 데이터베이스 아키텍처","description":"","frontmatter":{},"headers":[],"relativePath":"MSDServer/database.md","filePath":"MSDServer/database.md","lastUpdated":1739188464000}'),n={name:"MSDServer/database.md"};function i(l,t,d,c,g,h){return e(),r("div",null,t[0]||(t[0]=[o('<h1 id="mescadas-데이터베이스-아키텍처" tabindex="-1">MeScaDas 데이터베이스 아키텍처 <a class="header-anchor" href="#mescadas-데이터베이스-아키텍처" aria-label="Permalink to &quot;MeScaDas 데이터베이스 아키텍처&quot;">​</a></h1><h2 id="_1-데이터베이스-선택" tabindex="-1">1. 데이터베이스 선택 <a class="header-anchor" href="#_1-데이터베이스-선택" aria-label="Permalink to &quot;1. 데이터베이스 선택&quot;">​</a></h2><p>우리는 MSD에 **관계형 데이터베이스(RDB)와 시계열 데이터베이스(TSDB)**를 함께 활용해야 한다고 판단했습니다.<br> 때문에, <strong>PostgreSQL</strong>을 선택하였고, 이를 기반으로 <strong>TimescaleDB</strong> 확장을 적용하였습니다.</p><h3 id="🔹-postgresql-–-관계형-데이터베이스-rdb" tabindex="-1">🔹 <strong>PostgreSQL – 관계형 데이터베이스(RDB)</strong> <a class="header-anchor" href="#🔹-postgresql-–-관계형-데이터베이스-rdb" aria-label="Permalink to &quot;🔹 **PostgreSQL – 관계형 데이터베이스(RDB)**&quot;">​</a></h3><ul><li>고급 쿼리 기능 및 확장성을 제공하는 전통적인 관계형 DBMS</li><li><strong>비즈니스 로직 및 데이터 모델링에 적합</strong></li><li><strong>SQL 문법을 유지하면서도 시계열 데이터도 함께 다룰 수 있음</strong></li></ul><h3 id="🔹-timescaledb-–-시계열-데이터베이스-tsdb" tabindex="-1">🔹 <strong>TimescaleDB – 시계열 데이터베이스(TSDB)</strong> <a class="header-anchor" href="#🔹-timescaledb-–-시계열-데이터베이스-tsdb" aria-label="Permalink to &quot;🔹 **TimescaleDB – 시계열 데이터베이스(TSDB)**&quot;">​</a></h3><ul><li><strong>초단위, 미만 주기의 데이터 수집</strong>을 위한 시계열 데이터 최적화</li><li><strong>데이터 자동 압축, 차트, TTL(자동 청소) 지원</strong></li><li><strong>고속 쿼리 성능을 유지하며 대량의 시계열 데이터 저장 가능</strong></li></ul><h2 id="_2-데이터-모델-설계" tabindex="-1">2. 데이터 모델 설계 <a class="header-anchor" href="#_2-데이터-모델-설계" aria-label="Permalink to &quot;2. 데이터 모델 설계&quot;">​</a></h2><p>저희가 설계한 데이터 모델은 <strong>여러 개의 관계형 테이블로 구성</strong>되어 있으며,<br><strong>직원정보, 생산 기본정보, 생산 계획, 그리고 수집된 데이터 현황</strong>까지 포함하고 있습니다.</p><p><img src="'+s+'" alt="ERD 모델"></p><h3 id="🔹-데이터-모델-주요-구성-요소" tabindex="-1">🔹 <strong>데이터 모델 주요 구성 요소</strong> <a class="header-anchor" href="#🔹-데이터-모델-주요-구성-요소" aria-label="Permalink to &quot;🔹 **데이터 모델 주요 구성 요소**&quot;">​</a></h3><ul><li><strong>직원정보 및 사용자 인증 정보</strong> (<code>user</code>, <code>employee</code> 테이블)</li><li><strong>생산 기본 정보 및 생산 계획</strong> (<code>part</code>, <code>line</code>, <code>injection_plan</code> 테이블)</li><li><strong>생산 LOT 및 품질 불량 데이터</strong> (<code>lot</code>, <code>vision_ng</code> 테이블)</li><li><strong>실시간 생산 데이터 및 누적 생산량</strong> (<code>injection_cum</code>, <code>vision_cum</code> 테이블)</li></ul><h2 id="_3-시계열-데이터-최적화" tabindex="-1">3. 시계열 데이터 최적화 <a class="header-anchor" href="#_3-시계열-데이터-최적화" aria-label="Permalink to &quot;3. 시계열 데이터 최적화&quot;">​</a></h2><h3 id="🔹-시계열-테이블-적용-필요성" tabindex="-1">🔹 <strong>시계열 테이블 적용 필요성</strong> <a class="header-anchor" href="#🔹-시계열-테이블-적용-필요성" aria-label="Permalink to &quot;🔹 **시계열 테이블 적용 필요성**&quot;">​</a></h3><ul><li>실시간으로 <strong>초단위 미만의 데이터</strong>가 수집되면서 <strong>대량의 데이터가 쌓임</strong></li><li>일반 관계형 DB 테이블에서는 <strong>1년만 지나도 데이터가 기하급수적으로 증가</strong></li><li>저장 용량뿐만 아니라 <strong>조회 성능도 저하</strong>될 가능성이 높음</li></ul><p>이를 해결하기 위해, <strong>시계열 데이터가 저장되는 테이블은 TimescaleDB를 활용하여 최적화</strong>하였습니다.</p><h3 id="🔹-시계열-테이블-적용-방식" tabindex="-1">🔹 <strong>시계열 테이블 적용 방식</strong> <a class="header-anchor" href="#🔹-시계열-테이블-적용-방식" aria-label="Permalink to &quot;🔹 **시계열 테이블 적용 방식**&quot;">​</a></h3><ul><li><strong><code>injection_cum</code>, <code>vision_cum</code></strong> 같은 실시간 데이터 테이블을 <strong>시계열 테이블(TSDB)로 변환</strong></li><li><strong>시간이 지나도 저장 및 조회 성능이 저하되지 않도록 최적화</strong></li></ul><h2 id="_4-timescaledb를-활용한-대용량-데이터-처리" tabindex="-1">4. TimescaleDB를 활용한 대용량 데이터 처리 <a class="header-anchor" href="#_4-timescaledb를-활용한-대용량-데이터-처리" aria-label="Permalink to &quot;4. TimescaleDB를 활용한 대용량 데이터 처리&quot;">​</a></h2><h3 id="🔹-성능-유지-방법" tabindex="-1">🔹 <strong>성능 유지 방법</strong> <a class="header-anchor" href="#🔹-성능-유지-방법" aria-label="Permalink to &quot;🔹 **성능 유지 방법**&quot;">​</a></h3><p>TimescaleDB의 기능을 활용하면, 코드상에서는 <strong>모든 라인의 데이터를 하나의 테이블에서 편리하게 관리</strong>할 수 있습니다.<br> 하지만 <strong>실제 데이터 저장 방식은 공장별, 하루 단위로 자동으로 분할(Chunking)되어 저장</strong>됩니다.</p><h3 id="🔹-timescaledb의-핵심-기능" tabindex="-1">🔹 <strong>TimescaleDB의 핵심 기능</strong> <a class="header-anchor" href="#🔹-timescaledb의-핵심-기능" aria-label="Permalink to &quot;🔹 **TimescaleDB의 핵심 기능**&quot;">​</a></h3><p>✅ <strong>자동 파티셔닝(Chunking)으로 공장별 데이터 분리</strong><br> ✅ <strong>하루 단위 논리적 테이블 분할로 필요 데이터만 로드</strong><br> ✅ <strong>압축 기능을 활용하여 저장 공간 절약</strong><br> ✅ <strong>TTL 기능을 통해 오래된 데이터 자동 정리</strong></p><p>이러한 기능 덕분에, <strong>수십 년이 지나도 저장 및 조회 성능이 유지</strong>되며,<br><strong>공장별 데이터를 하나의 통합된 테이블 모델에서 관리할 수 있었습니다.</strong></p><h2 id="_5-데이터-아키텍처의-기대-효과" tabindex="-1">5. 데이터 아키텍처의 기대 효과 <a class="header-anchor" href="#_5-데이터-아키텍처의-기대-효과" aria-label="Permalink to &quot;5. 데이터 아키텍처의 기대 효과&quot;">​</a></h2><table tabindex="0"><thead><tr><th>기존 관계형 DB(RDB) 문제점</th><th>TimescaleDB 적용 후 개선점</th></tr></thead><tbody><tr><td>대량의 실시간 데이터 처리 시 저장 및 조회 성능 저하</td><td>시계열 테이블 자동 파티셔닝으로 성능 유지</td></tr><tr><td>데이터가 많아질수록 쿼리 속도가 급격히 저하</td><td>필요한 데이터만 로드하여 빠른 조회 가능</td></tr><tr><td>1년 이상 데이터가 쌓이면 관리 어려움</td><td>TTL 기능으로 자동 데이터 정리 가능</td></tr><tr><td>단일 테이블에 모든 데이터를 저장 시 성능 저하</td><td>하루 단위 데이터 분할 저장으로 최적화</td></tr></tbody></table><h2 id="_6-결론" tabindex="-1">6. 결론 <a class="header-anchor" href="#_6-결론" aria-label="Permalink to &quot;6. 결론&quot;">​</a></h2><p>✅ <strong>PostgreSQL + TimescaleDB 조합을 통해 관계형 DB와 시계열 DB의 장점을 모두 활용</strong><br> ✅ <strong>대량의 실시간 데이터가 쌓여도 저장/조회 성능을 유지하도록 설계</strong><br> ✅ <strong>모든 공장 데이터를 하나의 테이블에서 통합 관리하면서도 성능 저하 없이 운영 가능</strong></p><p>본 시스템을 통해 <strong>MeScaDas의 데이터 저장 및 관리 성능을 최적화</strong>할 수 있었습니다. 🚀</p>',29)]))}const u=a(n,[["render",i]]);export{m as __pageData,u as default};
