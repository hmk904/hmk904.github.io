import{_ as r,c as o,o as a,aj as n}from"./chunks/framework.Dq3QIEZg.js";const s="/images/CRUX%EB%B3%B4%EC%95%88.png",u=JSON.parse('{"title":"CRUX 서버 보안 아키텍처","description":"","frontmatter":{},"headers":[],"relativePath":"MSDServer/security.md","filePath":"MSDServer/security.md","lastUpdated":1739187434000}'),e={name:"MSDServer/security.md"};function i(l,t,g,d,h,c){return a(),o("div",null,t[0]||(t[0]=[n('<h1 id="crux-서버-보안-아키텍처" tabindex="-1">CRUX 서버 보안 아키텍처 <a class="header-anchor" href="#crux-서버-보안-아키텍처" aria-label="Permalink to &quot;CRUX 서버 보안 아키텍처&quot;">​</a></h1><p><img src="'+s+'" alt="보안"><br> CRUX 서버는 <strong>인가된 사용자 및 프로그램만 서버 데이터를 사용할 수 있도록 보안 기능을 강화</strong>하였습니다.<br> 이를 위해 <strong>비밀번호 암호화, JSON Web Token(JWT) 기반 인증, 비대칭 보안키(RSA) 검증</strong>을 적용하였습니다.</p><h2 id="_1-비밀번호-보호" tabindex="-1">1. 비밀번호 보호 <a class="header-anchor" href="#_1-비밀번호-보호" aria-label="Permalink to &quot;1. 비밀번호 보호&quot;">​</a></h2><p>사용자의 비밀번호는 <strong>해독이 불가능한 암호문 형태</strong>로 데이터베이스(DB)에 저장됩니다.<br> 이로 인해, <strong>서버 개발자조차 원본 비밀번호를 알아낼 수 없습니다.</strong></p><h3 id="🔹-비밀번호-암호화-프로세스" tabindex="-1">🔹 <strong>비밀번호 암호화 프로세스</strong> <a class="header-anchor" href="#🔹-비밀번호-암호화-프로세스" aria-label="Permalink to &quot;🔹 **비밀번호 암호화 프로세스**&quot;">​</a></h3><ol><li>사용자가 입력한 <strong>원본 비밀번호</strong>를 수집</li><li><strong>Salt(솔트) 값 추가</strong> → 동일한 비밀번호라도 해시 값이 다르게 생성됨</li><li><strong>비밀번호 암호화(Hashing) 수행</strong></li><li><strong>Digest 형태로 데이터베이스(DB)에 저장</strong> → <strong>역추적이 불가능한 상태</strong></li></ol><p>이 방식을 통해 <strong>비밀번호 유출 및 해킹 시도를 방지할 수 있습니다.</strong></p><h2 id="_2-json-web-token-jwt-기반-인증" tabindex="-1">2. JSON Web Token (JWT) 기반 인증 <a class="header-anchor" href="#_2-json-web-token-jwt-기반-인증" aria-label="Permalink to &quot;2. JSON Web Token (JWT) 기반 인증&quot;">​</a></h2><p>사용자가 로그인하면, <strong>사용자의 정보 및 권한을 기반으로 변조 불가능한 &quot;JSON Web Token (JWT)&quot;</strong> 을 발급합니다.<br> CRUX 서버는 <strong>클라이언트가 반드시 이 토큰을 포함하여 요청하도록 설계</strong>되어 있습니다.</p><h3 id="🔹-jwt-인증-과정" tabindex="-1">🔹 <strong>JWT 인증 과정</strong> <a class="header-anchor" href="#🔹-jwt-인증-과정" aria-label="Permalink to &quot;🔹 **JWT 인증 과정**&quot;">​</a></h3><ol><li>사용자가 로그인</li><li><strong>서버에서 사용자 정보와 권한을 기반으로 JWT 발급</strong></li><li>클라이언트는 <strong>JWT를 포함하여 데이터 요청</strong></li><li>서버는 <strong>JWT가 변조되지 않았는지 검증 후 응답</strong></li></ol><h3 id="🔹-jwt-보안-강화" tabindex="-1">🔹 <strong>JWT 보안 강화</strong> <a class="header-anchor" href="#🔹-jwt-보안-강화" aria-label="Permalink to &quot;🔹 **JWT 보안 강화**&quot;">​</a></h3><ul><li>**비대칭 보안키(RSA)**를 사용하여 <strong>토큰 변조 여부를 검증</strong></li><li><strong>변조된 토큰을 사용한 요청은 자동으로 차단</strong></li></ul><p>이 방식은 <strong>세션 방식보다 가볍고 확장성이 뛰어나며, RESTful API와의 연동이 용이</strong> 합니다.</p><h2 id="_4-crux-보안-아키텍처의-기대-효과" tabindex="-1">4. CRUX 보안 아키텍처의 기대 효과 <a class="header-anchor" href="#_4-crux-보안-아키텍처의-기대-효과" aria-label="Permalink to &quot;4. CRUX 보안 아키텍처의 기대 효과&quot;">​</a></h2><table tabindex="0"><thead><tr><th>보안 위협</th><th>적용된 해결책</th></tr></thead><tbody><tr><td>비밀번호 유출 위험</td><td><strong>해독 불가능한 암호화 저장 (Salt + Hashing + Digest 저장)</strong></td></tr><tr><td>무단 API 접근</td><td><strong>JWT 인증 기반 API 보호</strong></td></tr><tr><td>세션 탈취 공격</td><td><strong>비대칭 암호화(RSA)로 변조 여부 검증</strong></td></tr><tr><td>클라이언트 간 데이터 탈취</td><td><strong>HTTPS 및 보안 토큰 적용</strong></td></tr></tbody></table><h2 id="_5-결론" tabindex="-1">5. 결론 <a class="header-anchor" href="#_5-결론" aria-label="Permalink to &quot;5. 결론&quot;">​</a></h2><p>✅ <strong>비밀번호 보호를 위한 철저한 암호화 기법 적용 (Salt + Hashing + Digest 저장)</strong><br> ✅ <strong>JWT 기반의 인증 방식으로 보안 강화 및 API 보호</strong><br> ✅ <strong>RSA 비대칭 암호화를 통한 토큰 검증 및 변조 방지</strong><br> ✅ <strong>인가된 사용자 및 클라이언트만 데이터 접근 가능하도록 설계</strong></p><p>CRUX 서버의 보안 아키텍처는 <strong>데이터 보호, 사용자 인증, API 보안 등 보안의 핵심 요소를 통합 적용</strong>하여<br> 강력한 보안 환경을 구축하였습니다. 🚀</p>',19)]))}const _=r(e,[["render",i]]);export{u as __pageData,_ as default};
